<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://beginner0821.github.io</id>
    <title>beginner</title>
    <updated>2021-01-04T07:23:33.362Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://beginner0821.github.io"/>
    <link rel="self" href="https://beginner0821.github.io/atom.xml"/>
    <subtitle>一个小菜鸡的学习历程</subtitle>
    <logo>https://beginner0821.github.io/images/avatar.png</logo>
    <icon>https://beginner0821.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, beginner</rights>
    <entry>
        <title type="html"><![CDATA[多线程初学总结]]></title>
        <id>https://beginner0821.github.io/post/duo-xian-cheng-chu-xue-zong-jie/</id>
        <link href="https://beginner0821.github.io/post/duo-xian-cheng-chu-xue-zong-jie/">
        </link>
        <updated>2021-01-04T07:17:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="进程和线程的区别">进程和线程的区别 :</h3>
<p><strong>区别在于进程是程序启动起来执行线程(默认线程main函数,gc垃圾回收线程)</strong></p>
<h3 id="继承thread类">继承Thread类</h3>
<ul>
<li>子类继承Thread类具备多线程能力</li>
<li>启动线程 : 子类对象 . start();</li>
<li><strong>不建议使用 : 避免OOP单继承局限性;</strong></li>
</ul>
<h3 id="实现runnable接口">实现Runnable接口</h3>
<ul>
<li>实现接口Runnable具有多线程能力</li>
<li>启动线程 : 传入目标对象+Thread对象.start();</li>
<li><strong>推进使用 : 避免了单继承的局限性,灵活方便,方便同一对象被多个线程使用</strong></li>
</ul>
<h3 id="实现callable接口">实现Callable接口</h3>
<ol>
<li>实现Callable接口,需要返回值类型</li>
<li>重写call方法,需要抛出异常</li>
<li>创建目标对象</li>
<li>创建执行服务 : ExecutorService sec= Executors.newFixedThreadPool(1); // 创建固定线程数量的线程池</li>
<li>提交执行 : Future<Boolean> rs= sec.submit(t1);</li>
<li>获取结果 :   Boolean  r1=  re.get();</li>
<li>关闭服务 : sec.shutdownNow();</li>
</ol>
<h3 id="callable的好处">Callable的好处</h3>
<p>1.可以自定义返回值</p>
<p>2.可以抛出异常</p>
<h2 id="线程五大状态">线程五大状态</h2>
<ol>
<li>
<p>创建状态     启动线程 -&gt;就绪状态</p>
</li>
<li>
<p>就绪状态    获得CPU -&gt;运行状态</p>
</li>
<li>
<p>阻塞状态   阻塞解除 -&gt;就绪状态</p>
</li>
<li>
<p>运行状态   等待用户输入丶线程休眠等 -&gt;阻塞状态   ;</p>
<p>线程自然执行完毕丶 外部干涉终止线程 -&gt;死亡状态</p>
<p>释放CPU资源 -&gt;就绪状态</p>
</li>
<li>
<p>死亡状态</p>
</li>
</ol>
]]></content>
    </entry>
</feed>